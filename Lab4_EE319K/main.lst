


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Anissa Chan and Pragna Subrahmanya
                       
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 1/18/2019
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ;   If the input PA4 is low, the stepper motor outputs c
                       ycle 10,6,5,9,...
    9 00000000         ;   If the input PA4 is high, the stepper motor outputs 
                       cycle 5,6,10,9,...
   10 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   11 00000000         ;   to verify that the system is functioning as expected
                       .
   12 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   13 00000000         ;  PA4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   14 00000000         ;  PE3-0 are stepper motor outputs 
   15 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   16 00000000         ; Instrumentation data to be gathered is as follows:
   17 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   18 00000000         ; The state information is the 5 bits on Port A bit 4 an
                       d Port E PE3-0
   19 00000000         ;   place one 8-bit entry in your Data Buffer  
   20 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   21 00000000         ;   place one 32-bit entry in the Time Buffer
   22 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   23 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   24 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   25 00000000         ;       entries you should stop collecting data
   26 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   27 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   28 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   29 00000000         
   30 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   31 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   32 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   33 00000000 40004400 
                       GPIO_PORTA_DIR_R



ARM Macro Assembler    Page 2 


                               EQU              0x40004400
   34 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   35 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   36 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   37 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   38 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   39 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000         
   42 00000000         ; RAM Area
   43 00000000                 AREA             DATA, ALIGN=2
   44 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   45 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   46 00000008         
   47 00000008         ;place your debug variables in RAM here
   48 00000008 00 00 00 
              00       CNT     SPACE            4
   49 0000000C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       DataBuffer
                               SPACE            100
   50 00000070 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       TimeBuffer
                               SPACE            100
   51 000000D4 00 00 00 
              00       DataPt  SPACE            4
   52 000000D8 00 00 00 
              00       TimePt  SPACE            4
   53 000000DC 00 00 00 
              00       LastTime
                               SPACE            4
   54 000000E0         
   55 000000E0         ; ROM Area
   56 000000E0                 IMPORT           TExaS_Init
   57 000000E0                 IMPORT           SysTick_Init
   58 000000E0         ;-UUU-Import routine(s) from other assembly files (like 



ARM Macro Assembler    Page 4 


                       SysTick.s) here
   59 000000E0                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   62 00000004 0000018F 
                       EndofBuffer
                               DCD              399
   63 00000008                 EXPORT           Start
   64 00000008         
   65 00000008         Start
   66 00000008         ; TExaS_Init sets bus clock at 80 MHz
   67 00000008         ; PA4, PE3-PE0 out logic analyzer to TExasDisplay
   68 00000008 486F            LDR              R0,=SendDataToLogicAnalyzer
   69 0000000A F040 0001       ORR              R0,R0,#1
   70 0000000E F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   71 00000012         ;place your initializations here
   72 00000012 486E            LDR              R0, =SYSCTL_RCGCGPIO_R
   73 00000014 6801            LDR              R1, [R0]
   74 00000016 F041 0120       ORR              R1, #0x20
   75 0000001A 6001            STR              R1, [R0]
   76 0000001C         
   77 0000001C BF00            NOP
   78 0000001E BF00            NOP
   79 00000020 BF00            NOP
   80 00000022 BF00            NOP
   81 00000024         
   82 00000024         
   83 00000024 486A            LDR              R0, = GPIO_PORTF_DIR_R
   84 00000026 6801            LDR              R1, [R0]
   85 00000028 F041 0104       ORR              R1, #0x04
   86 0000002C 6001            STR              R1, [R0]
   87 0000002E         
   88 0000002E 4869            LDR              R0, =GPIO_PORTF_DEN_R
   89 00000030 6801            LDR              R1, [R0]
   90 00000032 F041 0104       ORR              R1, #0x04
   91 00000036 6001            STR              R1, [R0]
   92 00000038         
   93 00000038 F000 F81F       BL               Stepper_Init ; initialize stepp
                                                            er motor
   94 0000003C F000 F837       BL               Switch_Init ; initialize switch
                                                             input
   95 00000040         ;**********************
   96 00000040 F000 F85A       BL               Debug_Init  ;(you write this)
   97 00000044         ;**********************
   98 00000044 B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   99 00000046 F04F 0500       MOV              R5,#0       ; last PA4
  100 0000004A         loop
  101 0000004A         
  102 0000004A 4963            LDR              R1,=GPIO_PORTA_DATA_R
  103 0000004C 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
  104 0000004E F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
  105 00000052 2C00            CMP              R4,#0



ARM Macro Assembler    Page 5 


  106 00000054 D00A            BEQ              no          ; skip if not pushe
                                                            d
  107 00000056 2D00            CMP              R5,#0
  108 00000058 D108            BNE              no          ; skip if pushed la
                                                            st time
  109 0000005A         ; this time yes, last time no
  110 0000005A 4960            LDR              R1,=Direction
  111 0000005C 6808            LDR              R0,[R1]     ; current direction
                                                            
  112 0000005E F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
  113 00000062 2802            CMP              R0,#2
  114 00000064 D101            BNE              ok
  115 00000066 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
  116 0000006A 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
  117 0000006C 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
  118 0000006E F000 F830       BL               Stepper_Step
  119 00000072 485B            LDR              R0,=1600000
  120 00000074 F000 F83D       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  121 00000078 E7E7            B                loop
  122 0000007A         ;Initialize stepper motor interface
  123 0000007A         Stepper_Init
  124 0000007A F04F 0001       MOV              R0,#1
  125 0000007E 4957            LDR              R1,=Direction
  126 00000080 6008            STR              R0,[R1]     ; Direction=0 (CW)
  127 00000082 F04F 0000       MOV              R0,#0
  128 00000086 4957            LDR              R1,=Index
  129 00000088 6008            STR              R0,[R1]     ; Index=0
  130 0000008A         ; activate clock for Port E
  131 0000008A 4950            LDR              R1, =SYSCTL_RCGCGPIO_R
  132 0000008C 6808            LDR              R0, [R1]
  133 0000008E F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  134 00000092 6008            STR              R0, [R1]
  135 00000094 BF00            NOP
  136 00000096 BF00            NOP                          ; allow time to fin
                                                            ish activating
  137 00000098         ; set direction register
  138 00000098 4953            LDR              R1, =GPIO_PORTE_DIR_R
  139 0000009A 6808            LDR              R0, [R1]
  140 0000009C F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  141 000000A0 6008            STR              R0, [R1]
  142 000000A2         ; enable digital port
  143 000000A2 4952            LDR              R1, =GPIO_PORTE_DEN_R
  144 000000A4 6808            LDR              R0, [R1]
  145 000000A6 F040 000F       ORR              R0, R0, #0x0F ; enable PE3-0
  146 000000AA 6008            STR              R0, [R1]
  147 000000AC 4770            BX               LR
  148 000000AE         ;Initialize switch interface
  149 000000AE         Switch_Init
  150 000000AE         ; activate clock for Port A
  151 000000AE 4947            LDR              R1, =SYSCTL_RCGCGPIO_R
  152 000000B0 6808            LDR              R0, [R1]
  153 000000B2 F040 0001       ORR              R0, R0, #0x01 ; Clock for A



ARM Macro Assembler    Page 6 


  154 000000B6 6008            STR              R0, [R1]
  155 000000B8 BF00            NOP
  156 000000BA BF00            NOP                          ; allow time to fin
                                                            ish activating
  157 000000BC         ; set direction register
  158 000000BC 494C            LDR              R1, =GPIO_PORTA_DIR_R
  159 000000BE 6808            LDR              R0, [R1]
  160 000000C0 F020 0010       BIC              R0, R0, #0x10 ; Input on PA4
  161 000000C4 6008            STR              R0, [R1]
  162 000000C6         ; 5) enable digital port
  163 000000C6 494B            LDR              R1, =GPIO_PORTA_DEN_R
  164 000000C8 6808            LDR              R0, [R1]
  165 000000CA F040 0010       ORR              R0, R0, #0x10 ; enable PA4
  166 000000CE 6008            STR              R0, [R1]
  167 000000D0 4770            BX               LR
  168 000000D2         ; Step the motor clockwise
  169 000000D2         ; Direction determines the rotational direction
  170 000000D2         ; Input: None
  171 000000D2         ; Output: None
  172 000000D2         Stepper_Step
  173 000000D2 B510            PUSH             {R4,LR}
  174 000000D4 4943            LDR              R1,=Index
  175 000000D6 680A            LDR              R2,[R1]     ; old Index
  176 000000D8 4B40            LDR              R3,=Direction
  177 000000DA 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  178 000000DC 4402            ADD              R2,R2,R0
  179 000000DE F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  180 000000E2 600A            STR              R2,[R1]     ; new Index
  181 000000E4 4B44            LDR              R3,=Stepper ; table
  182 000000E6 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  183 000000E8 4944            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  184 000000EA 6008            STR              R0,[R1]
  185 000000EC F000 F832       BL               Debug_Capture
  186 000000F0 BD10            POP              {R4,PC}
  187 000000F2         ; inaccurate and inefficient time delay
  188 000000F2         Wait
  189 000000F2 1E40            SUBS             R0,R0,#1    ; outer loop
  190 000000F4 D1FD            BNE              Wait
  191 000000F6 4770            BX               LR
  192 000000F8         
  193 000000F8         Debug_Init
  194 000000F8 B51F            PUSH             {R0-R4,LR}
  195 000000FA         ; you write this
  196 000000FA F002 0200       AND              R2, #0
  197 000000FE         
  198 000000FE 4840            LDR              R0, =DataBuffer ;initialising d
                                                            ata buffer
  199 00000100 4B40            LDR              R3, =EndofBuffer
  200 00000102 681C            LDR              R4, [R3]
  201 00000104         
  202 00000104         datainitloop
  203 00000104 5881            LDR              R1, [R0, R2]
  204 00000106 F001 0100       AND              R1, #0
  205 0000010A F101 01FF       ADD              R1, #0xFF
  206 0000010E 5081            STR              R1, [R0, R2]



ARM Macro Assembler    Page 7 


  207 00000110         
  208 00000110 F102 0201       ADD              R2, #1
  209 00000114 2A63            CMP              R2, #99
  210 00000116 D1F5            BNE              datainitloop
  211 00000118         
  212 00000118 F002 0200       AND              R2, #0
  213 0000011C         
  214 0000011C 483A            LDR              R0, =TimeBuffer ;initialising t
                                                            ime buffer
  215 0000011E         
  216 0000011E         timeinitloop
  217 0000011E 5881            LDR              R1, [R0, R2]
  218 00000120 F001 0100       AND              R1, #0
  219 00000124 F101 31FF       ADD              R1, #0xFFFFFFFF
  220 00000128 5081            STR              R1, [R0, R2]
  221 0000012A         
  222 0000012A F102 0203       ADD              R2, #3
  223 0000012E 42A2            CMP              R2, R4
  224 00000130 D1F5            BNE              timeinitloop
  225 00000132         
  226 00000132 4836            LDR              R0, =DataPt
  227 00000134 6801            LDR              R1, [R0]
  228 00000136 F001 0100       AND              R1, #0
  229 0000013A 4A31            LDR              R2, =DataBuffer
  230 0000013C 4411            ADD              R1, R2
  231 0000013E 6001            STR              R1, [R0]
  232 00000140         
  233 00000140 4833            LDR              R0, =TimePt
  234 00000142 6801            LDR              R1, [R0]
  235 00000144 F001 0100       AND              R1, #0
  236 00000148 4A2F            LDR              R2, =TimeBuffer
  237 0000014A 4411            ADD              R1, R2
  238 0000014C 6001            STR              R1, [R0]
  239 0000014E         
  240 0000014E F7FF FFFE       BL               SysTick_Init
  241 00000152 BD1F            POP              {R0-R4,PC}
  242 00000154         
  243 00000154         ;Debug capture
  244 00000154         Debug_Capture
  245 00000154 B57F            PUSH             {R0-R6,LR}
  246 00000156         
  247 00000156 482E            LDR              R0, = TimePt
  248 00000158 6801            LDR              R1, [R0]
  249 0000015A 4A2B            LDR              R2, = TimeBuffer
  250 0000015C F502 72C8       ADD              R2, #400
  251 00000160 4291            CMP              R1, R2
  252 00000162 D024            BEQ              Return
  253 00000164         
  254 00000164 4829            LDR              R0, =DataPt
  255 00000166 6801            LDR              R1, [R0]
  256 00000168 4A25            LDR              R2, =DataBuffer
  257 0000016A F102 0264       ADD              R2, #100
  258 0000016E 4291            CMP              R1, R2
  259 00000170 D01D            BEQ              Return
  260 00000172         
  261 00000172 4819            LDR              R0, =GPIO_PORTA_DATA_R 
                                                            ;reading PA4 bit
  262 00000174 6801            LDR              R1, [R0]
  263 00000176 F001 0210       AND              R2, R1, #0x10



ARM Macro Assembler    Page 8 


  264 0000017A         
  265 0000017A 4820            LDR              R0, =GPIO_PORTE_DATA_R 
                                                            ;reading PE0-3 bits
                                                            
  266 0000017C 6801            LDR              R1, [R0]
  267 0000017E F001 030F       AND              R3, R1, #0x0F
  268 00000182         
  269 00000182 441A            ADD              R2, R2, R3  ;combining all the 
                                                            bits
  270 00000184         
  271 00000184 4821            LDR              R0, =DataPt
  272 00000186 6801            LDR              R1, [R0]
  273 00000188         
  274 00000188 700A            STRB             R2, [R1]    ;dumping data into 
                                                            DataBuffer
  275 0000018A         
  276 0000018A F101 0101       ADD              R1, #1      ;incrementing data 
                                                            pointer by 1
  277 0000018E 6001            STR              R1, [R0]
  278 00000190         
  279 00000190 481D            LDR              R0, = TimeBuffer ;holds the add
                                                            ress of where the b
                                                            uffer is located
  280 00000192 6803            LDR              R3, [R0]    ;R4 will hold the e
                                                            lapsed time
  281 00000194 481E            LDR              R0, = TimePt
  282 00000196 6806            LDR              R6, [R0]    ;R6 holds TimePt
  283 00000198         
  284 00000198 481E            LDR              R0, = NVIC_ST_CURRENT_R
  285 0000019A 6801            LDR              R1, [R0]    ;R1 holds the curre
                                                            nt time the timer
  286 0000019C 481E            LDR              R0, = LastTime
  287 0000019E 6805            LDR              R5, [R0]    ;will hold the prev
                                                            ious time to be sub
                                                            tracted from
  288 000001A0 1A6B            SUBS             R3, R5, R1
  289 000001A2 F023 437F       AND              R3, #0x00FFFFFF
  290 000001A6 6033            STR              R3, [R6]    ;dumping elapsed ti
                                                            me into time buffer
                                                            
  291 000001A8 F106 0604       ADD              R6, R6, #4  ;incrementing time 
                                                            pointer by 4
  292 000001AC 4605            MOV              R5, R0      ;makes the current 
                                                            time the previous t
                                                            ime
  293 000001AE         
  294 000001AE         Return
  295 000001AE         
  296 000001AE BD7F            POP              {R0-R6,PC}
  297 000001B0         
  298 000001B0         ; edit the following only if you need to move pins from 
                       PA4, PE3-0      
  299 000001B0         ; logic analyzer on the real board
  300 000001B0 40004040 
                       PA4     equ              0x40004040
  301 000001B0 4002403C 
                       PE30    equ              0x4002403C
  302 000001B0 4000C000 
                       UART0_DR_R



ARM Macro Assembler    Page 9 


                               equ              0x4000C000
  303 000001B0         SendDataToLogicAnalyzer
  304 000001B0 491A            LDR              R1,=PA4
  305 000001B2 6809            LDR              R1,[R1]     ; read PA4
  306 000001B4 481A            LDR              R0,=PE30    ; read PE3-PE0
  307 000001B6 6800            LDR              R0,[R0]
  308 000001B8 EA40 0001       ORR              R0,R0,R1    ;combine into one 5
                                                            -bit value
  309 000001BC F040 0080       ORR              R0,R0,#0x80
  310 000001C0 4918            LDR              R1,=UART0_DR_R
  311 000001C2 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  312 000001C4 4770            BX               LR
  313 000001C6         
  314 000001C6         
  315 000001C6 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  316 000001C8                 END                          ; end of file
              00000000 
              400FE608 
              40025400 
              4002551C 
              400043FC 
              00000000 
              00186A00 
              00000000 
              40024400 
              4002451C 
              40004400 
              4000451C 
              00000000 
              400243FC 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E018 
              00000000 
              40004040 
              4002403C 
              4000C000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\
5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Inclu
de\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526"
 --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\main.lst
 main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CNT 00000008

Symbol: CNT
   Definitions
      At line 48 in file main.s
   Uses
      None
Comment: CNT unused
DATA 00000000

Symbol: DATA
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 0000000C

Symbol: DataBuffer
   Definitions
      At line 49 in file main.s
   Uses
      At line 198 in file main.s
      At line 229 in file main.s
      At line 256 in file main.s

DataPt 000000D4

Symbol: DataPt
   Definitions
      At line 51 in file main.s
   Uses
      At line 226 in file main.s
      At line 254 in file main.s
      At line 271 in file main.s

Direction 00000004

Symbol: Direction
   Definitions
      At line 45 in file main.s
   Uses
      At line 110 in file main.s
      At line 125 in file main.s
      At line 176 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 44 in file main.s
   Uses
      At line 128 in file main.s
      At line 174 in file main.s

LastTime 000000DC

Symbol: LastTime
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 53 in file main.s
   Uses
      At line 286 in file main.s
Comment: LastTime used once
TimeBuffer 00000070

Symbol: TimeBuffer
   Definitions
      At line 50 in file main.s
   Uses
      At line 214 in file main.s
      At line 236 in file main.s
      At line 249 in file main.s
      At line 279 in file main.s

TimePt 000000D8

Symbol: TimePt
   Definitions
      At line 52 in file main.s
   Uses
      At line 233 in file main.s
      At line 247 in file main.s
      At line 281 in file main.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 00000154

Symbol: Debug_Capture
   Definitions
      At line 244 in file main.s
   Uses
      At line 185 in file main.s
Comment: Debug_Capture used once
Debug_Init 000000F8

Symbol: Debug_Init
   Definitions
      At line 193 in file main.s
   Uses
      At line 96 in file main.s
Comment: Debug_Init used once
EndofBuffer 00000004

Symbol: EndofBuffer
   Definitions
      At line 62 in file main.s
   Uses
      At line 199 in file main.s
Comment: EndofBuffer used once
Return 000001AE

Symbol: Return
   Definitions
      At line 294 in file main.s
   Uses
      At line 252 in file main.s
      At line 259 in file main.s

SendDataToLogicAnalyzer 000001B0

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 303 in file main.s
   Uses
      At line 68 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000008

Symbol: Start
   Definitions
      At line 65 in file main.s
   Uses
      At line 63 in file main.s
Comment: Start used once
Stepper 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Stepper
   Definitions
      At line 61 in file main.s
   Uses
      At line 181 in file main.s
Comment: Stepper used once
Stepper_Init 0000007A

Symbol: Stepper_Init
   Definitions
      At line 123 in file main.s
   Uses
      At line 93 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000D2

Symbol: Stepper_Step
   Definitions
      At line 172 in file main.s
   Uses
      At line 118 in file main.s
Comment: Stepper_Step used once
Switch_Init 000000AE

Symbol: Switch_Init
   Definitions
      At line 149 in file main.s
   Uses
      At line 94 in file main.s
Comment: Switch_Init used once
Wait 000000F2

Symbol: Wait
   Definitions
      At line 188 in file main.s
   Uses
      At line 120 in file main.s
      At line 190 in file main.s

datainitloop 00000104

Symbol: datainitloop
   Definitions
      At line 202 in file main.s
   Uses
      At line 210 in file main.s
Comment: datainitloop used once
loop 0000004A

Symbol: loop
   Definitions
      At line 100 in file main.s
   Uses
      At line 121 in file main.s
Comment: loop used once
no 0000006C

Symbol: no
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 117 in file main.s
   Uses
      At line 106 in file main.s
      At line 108 in file main.s

ok 0000006A

Symbol: ok
   Definitions
      At line 116 in file main.s
   Uses
      At line 114 in file main.s
Comment: ok used once
timeinitloop 0000011E

Symbol: timeinitloop
   Definitions
      At line 216 in file main.s
   Uses
      At line 224 in file main.s
Comment: timeinitloop used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 102 in file main.s
      At line 261 in file main.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 163 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 158 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 183 in file main.s
      At line 265 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 143 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 138 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 38 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 88 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 83 in file main.s
Comment: GPIO_PORTF_DIR_R used once
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 284 in file main.s
Comment: NVIC_ST_CURRENT_R used once
PA4 40004040

Symbol: PA4
   Definitions
      At line 300 in file main.s
   Uses
      At line 304 in file main.s
Comment: PA4 used once
PE30 4002403C

Symbol: PE30
   Definitions
      At line 301 in file main.s
   Uses
      At line 306 in file main.s
Comment: PE30 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 72 in file main.s
      At line 131 in file main.s
      At line 151 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 302 in file main.s
   Uses
      At line 310 in file main.s
Comment: UART0_DR_R used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 57 in file main.s
   Uses
      At line 240 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 56 in file main.s
   Uses
      At line 70 in file main.s
Comment: TExaS_Init used once
2 symbols
378 symbols in table
